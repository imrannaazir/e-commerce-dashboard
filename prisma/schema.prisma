// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// model for Store
model Store{
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  userId     String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[] @relation("StoreToCategory")
  sizes      Size[] @relation("StoreToSize")
  colors     Color[] @relation("StoreToColor") 
  products   Product[] @relation("StoreToProduct")
  orders     Order[] @relation("StoreToOrder")
  createdAt  DateTime @default(now())
  updatedAt  DateTime  @updatedAt
}

// model for billboard
model Billboard{
  id          String @id @default(auto()) @map("_id") @db.ObjectId

  store       Store @relation("StoreToBillboard",fields: [storeId],references: [id])
  categories  Category[]
  storeId     String @db.ObjectId
  label       String
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

}


// Category modle 
model Category{
  id               String @id @default(auto()) @map("_id")    @db.ObjectId
  storeId          String @db.ObjectId
  store            Store @relation("StoreToCategory",fields: [storeId],references: [id])
  billboardId      String @db.ObjectId
  billboard        Billboard @relation(fields: [billboardId],references: [id])
  products         Product[] @relation("CategoryToProduct")
  name             String
  icon             String @default("")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt      
}

// size model
model Size{
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  storeId      String @db.ObjectId
  store        Store @relation("StoreToSize",fields: [storeId],references: [id])    
  products     Product[] @relation("SizeToProduct")
  name         String
  value        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// model for color
model Color{
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String  @db.ObjectId
  store       Store @relation("StoreToColor",fields: [storeId], references: [id])
  products    Product[] @relation("ColorToProduct")
  name        String
  value       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// model for product
model Product{
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  storeId        String @db.ObjectId
  store          Store @relation("StoreToProduct",fields: [storeId], references: [id])
  categoryId     String @db.ObjectId
  category       Category @relation("CategoryToProduct",fields: [categoryId],references: [id])
  sizeId          String @db.ObjectId
  size            Size @relation("SizeToProduct",fields: [sizeId], references: [id])
  colorId         String @db.ObjectId
  color           Color @relation("ColorToProduct",fields: [colorId],references: [id])
  orderItems      OrderItem[]
  name            String
  price           Float @default(0.0)
  isFeatured      Boolean @default(false)
  isArchived      Boolean @default(false)
  images          Image[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

}


// model for image
model Image{
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  productId     String @db.ObjectId
  product       Product @relation(fields: [productId],references: [id],onDelete:Cascade)
  url          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}


// model for order
model Order{
  id              String @default(auto()) @id @map("_id") @db.ObjectId
  storeId         String @db.ObjectId
  store           Store @relation("StoreToOrder",fields: [storeId],references: [id])
  orderItems       OrderItem[]
  isPaid           Boolean @default(false)
  phone            String  @default("")
  address          String  @default("")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

// model for orderItem
model OrderItem{
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  orderId           String @db.ObjectId
  Order             Order @relation(fields: [orderId],references: [id])
  productId         String @db.ObjectId
  product           Product @relation(fields: [productId],references: [id])
}


model Todo{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  
}

// npx prisma generate
//npx prisma db push